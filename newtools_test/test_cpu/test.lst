#### Labels
ADJUST_DIF       = 0x033B
AdjBump          = 0x036A
AdjCheckTable    = 0x0344
AdjNextRow       = 0x033D
BUILDROW         = 0x008E
Count100s        = 0x029B
Count10s         = 0x02A6
CountDone        = 0x02B1
DIGITS           = 0x0528
DoGameOverMode   = 0x0041
DoPlayMode       = 0x003B
DrawFrame        = 0x0044
DrawVisibleRows  = 0x005E
EXPERTISE        = 0x0312
ExpDone          = 0x0338
ExpNoP1          = 0x033A
ExpP0Ama         = 0x031F
ExpP1            = 0x0321
ExpP1Ama         = 0x0336
F000             = 0x0000
F7FA             = 0x0578
FxRun            = 0x0481
GOMODE           = 0x023D
GR_PLAYER        = 0x0520
GapDone          = 0x0296
GapOK            = 0x0285
GoCheckP1        = 0x021F
GoKeepGoing      = 0x0247
GoP1Hit          = 0x0231
INIT             = 0x0105
INIT_GOMODE      = 0x0211
INIT_GO_FX       = 0x0455
INIT_MUSIC       = 0x0387
INIT_PLAYMODE    = 0x014E
INIT_SELMODE     = 0x01D5
MA1_01           = 0x0488
MA1_END          = 0x049C
MA2_01           = 0x04A0
MA2_END          = 0x04B1
MAKE_SCORE       = 0x0297
MA_SONG_1        = 0x0484
MA_SONG_2        = 0x049C
MB1_01           = 0x04B5
MB1_END          = 0x04C7
MB2_01           = 0x04CB
MB2_END          = 0x04DD
MB_SONG_1        = 0x04B1
MB_SONG_2        = 0x04C7
MOVE_WALLS       = 0x0248
MUSICA           = 0x0484
MUSICB           = 0x04B1
MoveP0Left       = 0x01B2
MoveP0Right      = 0x01AD
MoveP1Left       = 0x01D0
MoveP1Right      = 0x01CB
MusChanA         = 0x03A8
MusChanB         = 0x0400
MusCmdCtrlA      = 0x03C4
MusCmdCtrlB      = 0x041C
MusCmdJumpA      = 0x03D0
MusCmdJumpB      = 0x0428
MusCmdToneA      = 0x03DE
MusCmdToneB      = 0x0436
MusDoB           = 0x03FC
MusDoDone        = 0x0454
MusNoteA         = 0x03E8
MusNoteB         = 0x0440
NEW_GAPS         = 0x0269
NoFirst          = 0x0186
NoHit            = 0x0198
NoSelect         = 0x016F
NoWall           = 0x00CB
PLAYMODE         = 0x0162
PROCESS_GO_FX    = 0x046C
PROCESS_MUSIC    = 0x03A4
SELMODE          = 0x01E4
SEL_RESET_CHK    = 0x0373
SKILL_VALUES     = 0x04DD
SelDebounce      = 0x0384
SelExp           = 0x020D
SelP1On          = 0x0203
SelStartGame     = 0x020A
SetMoveP0        = 0x01B4
SetMoveP1        = 0x01D2
ShowP0           = 0x00A7
ShowP1           = 0x00AD
ShowScore        = 0x00D4
TimeP0Pos        = 0x011B
TimeP1Pos        = 0x0122
VIDEO_KERNEL     = 0x000B
WallDone         = 0x0266
WallOK           = 0x0264
main             = 0x0000

#### Defines
AUDC0            = 0x0015
AUDC1            = 0x0016
AUDF0            = 0x0017
AUDF1            = 0x0018
AUDV0            = 0x0019
AUDV1            = 0x001A
COLUBK           = 0x0009
COLUP0           = 0x0006
COLUP1           = 0x0007
COLUPF           = 0x0008
CTRLPF           = 0x000A
CXBLPF           = 0x0006
CXCLR            = 0x002C
CXM0FB           = 0x0004
CXM0P            = 0x0000
CXM1FB           = 0x0005
CXM1P            = 0x0001
CXP0FB           = 0x0002
CXP1FB           = 0x0003
CXPPMM           = 0x0007
DEBOUNCE         = 0x0090
ENABL            = 0x001F
ENAM0            = 0x001D
ENAM1            = 0x001E
ENTROPYA         = 0x008D
ENTROPYB         = 0x008E
ENTROPYC         = 0x008F
GAPBITS          = 0x0096
GRP0             = 0x001B
GRP1             = 0x001C
HMBL             = 0x0024
HMCLR            = 0x002B
HMM0             = 0x0022
HMM1             = 0x0023
HMOVE            = 0x002A
HMP0             = 0x0020
HMP1             = 0x0021
INPT0            = 0x0008
INPT1            = 0x0009
INPT2            = 0x000A
INPT3            = 0x000B
INPT4            = 0x000C
INPT5            = 0x000D
INTIM            = 0x0284
MODE             = 0x0088
MUSADEL          = 0x00A3
MUSAIND          = 0x00A4
MUSAVOL          = 0x00A5
MUSBDEL          = 0x00A6
MUSBIND          = 0x00A7
MUSBVOL          = 0x00A8
MUSCMD_CONTROL   = 0x0001
MUSCMD_JUMP      = 0x0000
MUSCMD_VOLUME    = 0x0002
MUS_DEL_1        = 0x0020
MUS_DEL_2        = 0x0040
MUS_DEL_3        = 0x0060
MUS_DEL_4        = 0x0080
MUS_REST         = 0x001F
MUS_TMP0         = 0x0085
MUS_TMP1         = 0x0086
NUSIZ0           = 0x0004
NUSIZ1           = 0x0005
PEFP1            = 0x000C
PF0              = 0x000D
PF1              = 0x000E
PF2              = 0x000F
PLAYR0Y          = 0x0083
PLAYR1Y          = 0x0084
REFP0            = 0x000B
RESBL            = 0x0014
RESM0            = 0x0012
RESM1            = 0x0013
RESMP0           = 0x0028
RESMP1           = 0x0029
RESP0            = 0x0010
RESP1            = 0x0011
RSYNC            = 0x0003
SCANCNT          = 0x0087
SCORE_PF1        = 0x0097
SCORE_PF2        = 0x009D
SWACNT           = 0x0281
SWBCNT           = 0x0283
SWCHA            = 0x0280
SWCHB            = 0x0282
TIM1024T         = 0x0297
TIM1T            = 0x0294
TIM64T           = 0x0296
TIM8T            = 0x0295
TMP0             = 0x0080
TMP1             = 0x0081
TMP2             = 0x0082
VBLANK           = 0x0001
VDELBL           = 0x0027
VDELP0           = 0x0025
VDELP1           = 0x0026
VSYNC            = 0x0000
WALLCNT          = 0x008A
WALLDELY         = 0x008B
WALLDELYR        = 0x008C
WALLDRELA        = 0x0091
WALLDRELB        = 0x0092
WALLDRELC        = 0x0093
WALLHEI          = 0x0095
WALLSTART        = 0x0094
WALL_INC         = 0x0089
WSYNC            = 0x0002
_CPU             = 6502
_default_base_page = true

                  ._CPU = 6502
                  ._default_base_page = true
                  
                  ; Hardware definitions
                  ; On the web: [http://www.alienbill.com/2600/101/docs/stella.html Stella Programmer's Guide]
                  
                  ; The address decoding for the 2600 is very simple. The TIA is accessed
                  ; if A12 is 0 and A7 is 0. The TIA is selected if (address&1080 == 0000).
                  ;
                  ; The TIA chip uses the 6 lower address lines A0-A5. The reads seem to
                  ; ignore A4 and A5.
                  ;
                  ; The addresses have different read/write definitions and many of them
                  ; are strobes that are triggered by writing any value.
                  ;
                  ; Note that the 6502 has an 8-bit stack pointer. The CPU automatically sets the upper
                  ; byte of the address to 01. The RIOT chip RAM ghosts from 00xx to 01xx putting the stack
                  ; in RAM.
                  
                  ; TIA
                  
                  ; Reads
                  .CXM0P    = 0x0000 ; Collisions M0/P1
                  .CXM1P    = 0x0001 ; Collisions M1/P0
                  .CXP0FB   = 0x0002 ; Collisions M0/PF
                  .CXP1FB   = 0x0003 ; Collisions P1/PF
                  .CXM0FB   = 0x0004 ; Collisions M0/PF
                  .CXM1FB   = 0x0005 ; Collisions M1/PF
                  .CXBLPF   = 0x0006 ; Collisions BL/PF
                  .CXPPMM   = 0x0007 ; Collisions P0/P1
                  .INPT0    = 0x0008 ; Paddle input 0
                  .INPT1    = 0x0009 ; Paddle input 1
                  .INPT2    = 0x000A ; Paddle input 2
                  .INPT3    = 0x000B ; Paddle input 3
                  .INPT4    = 0x000C ; Latched inputs (joystick buttons)
                  .INPT5    = 0x000D ; Latched inputs (joystick buttons)
                  
                  ; Writes
                  .VSYNC    = 0x0000 ; D1=1 starts the vertical sync
                  .VBLANK   = 0x0001 ; D1=1 starts the vertical blank (D6 and D7 config INPT0-5)
                  .WSYNC    = 0x0002 ; Halts processor until leading edge of horizontal blank
                  .RSYNC    = 0x0003 ; Resets sync counter (used in chip testing)
                  .NUSIZ0   = 0x0004 ; Number and size of player/missile P0
                  .NUSIZ1   = 0x0005 ; Number and size of player/missile P0
                  .COLUP0   = 0x0006 ; Color-luminance of player 0
                  .COLUP1   = 0x0007 ; Color-luminance of player 1
                  .COLUPF   = 0x0008 ; Color-luminance of play filed
                  .COLUBK   = 0x0009 ; Color-luminance of background
                  .CTRLPF   = 0x000A ; Control playfield, priorities, and ball size
                  .REFP0    = 0x000B ; D3=1 reflects player 0
                  .PEFP1    = 0x000C ; D3=1 reflects player 1
                  .PF0      = 0x000D ; Playfield 0 bits (upper 4 bits)
                  .PF1      = 0x000E ; Playfield 1 bits
                  .PF2      = 0x000F ; Playfield 2 bits
                  .RESP0    = 0x0010 ; Set horizontal position of player 0
                  .RESP1    = 0x0011 ; Set horizontal position of player 1
                  .RESM0    = 0x0012 ; Set horizontal position of missile 0
                  .RESM1    = 0x0013 ; Set horizontal position of missile 1
                  .RESBL    = 0x0014 ; Set horizontal position of ball
                  .AUDC0    = 0x0015 ; Noise, tone, division control channel 0
                  .AUDC1    = 0x0016 ; Noise, tone, division control channel 1
                  .AUDF0    = 0x0017 ; Frequency divider channel 0
                  .AUDF1    = 0x0018 ; Frequency divider channel 1
                  .AUDV0    = 0x0019 ; Volume channel 0
                  .AUDV1    = 0x001A ; Volume channel 1
                  .GRP0     = 0x001B ; Player 0 graphics
                  .GRP1     = 0x001C ; Player 1 graphics
                  .ENAM0    = 0x001D ; D1=1 to enable missile 0
                  .ENAM1    = 0x001E ; D1=1 to enable missile 1
                  .ENABL    = 0x001F ; D1=1 to enable ball
                  .HMP0     = 0x0020 ; Horizontal motion offset for player 0
                  .HMP1     = 0x0021 ; Horizontal motion offset for player 1
                  .HMM0     = 0x0022 ; Horizontal motion offset for missile 0
                  .HMM1     = 0x0023 ; Horizontal motion offset for missile 1
                  .HMBL     = 0x0024 ; Horizontal motion offset for ball
                  .VDELP0   = 0x0025 ; D0=1 to delay player 0 one vertical line
                  .VDELP1   = 0x0026 ; D0=1 to delay player 1 one vertical line
                  .VDELBL   = 0x0027 ; D0=1 to delay ball one vertical line
                  .RESMP0   = 0x0028 ; D1=1 to reset missile 0 to player 0
                  .RESMP1   = 0x0029 ; D1=1 to reset missile 1 to player 1
                  .HMOVE    = 0x002A ;  Executes horizontal motions
                  .HMCLR    = 0x002B ; Clears all horizonal motion registers
                  .CXCLR    = 0x002C ; Clears all collision registers
                  
                  ; PIA
                  
                  ; The PIA (R.I.O.T.) is accessed if A12 is 0 and A7 is 1. If A9 is 0 then the 128 bytes
                  ; of RAM are selected. If A9 is 1 then the PIA timer registers are selected.
                  ;
                  ; The TIA REGS are selected if (address&1280 == 0280).
                  ;
                  ; The TIA RAM is selected if (address&1280 == 0080).
                  ;
                  ; The PIA chip uses the lower 7 address lines A0-A6. Thus the 007F mask below.
                  
                  .SWCHA    = 0x0280 ; Port A Hand controllers
                  .SWACNT   = 0x0281 ; Port A DDR
                  
                  .SWCHB    = 0x0282 ; Port B Console switches
                  ; D7 : P1 difficulty (0=amateur, 1=pro)
                  ; D6 : P0 difficulty (0=amateur, 1=pro)
                  ; D5 : not used
                  ; D4 : not used
                  ; D3 : color or B/W (0=B/W, 1=color)
                  ; D2 : not used
                  ; D1 : game select (0=pressed)
                  ; D0 : game reset (0=pressed)
                  
                  .SWBCNT   = 0x0283 ; Port B DDR
                  .INTIM    = 0x0284 ; Timer output (read only)
                  .TIM1T    = 0x0294 ; Set 1 clock interval (write only)
                  .TIM8T    = 0x0295 ; Set 8 clock interval (write only)
                  .TIM64T   = 0x0296 ; Set 64 clock interval (write only)
                  .TIM1024T = 0x0297 ; Set 1024 clock interval (write only)
                  
                  ; RAM Usage
                  .TMP0      = 128
                  .TMP1      = 129
                  .TMP2      = 130
                  .PLAYR0Y   = 131
                  .PLAYR1Y   = 132
                  .MUS_TMP0  = 133
                  .MUS_TMP1  = 134
                  .SCANCNT   = 135
                  .MODE      = 136
                  .WALL_INC  = 137
                  .WALLCNT   = 138
                  .WALLDELY  = 139
                  .WALLDELYR = 140
                  .ENTROPYA  = 141
                  .ENTROPYB  = 142
                  .ENTROPYC  = 143
                  .DEBOUNCE  = 144
                  .WALLDRELA = 145
                  .WALLDRELB = 146
                  .WALLDRELC = 147
                  .WALLSTART = 148
                  .WALLHEI   = 149
                  .GAPBITS   = 150
                  .SCORE_PF1 = 151
                  .SCORE_PF2 = 157
                  .MUSADEL   = 163
                  .MUSAIND   = 164
                  .MUSAVOL   = 165
                  .MUSBDEL   = 166
                  .MUSBIND   = 167
                  .MUSBVOL   = 168
                  
                  F000:
                  main:
0000: 78               SEI                       ; Turn off interrupts
0001: D8               CLD                       ; Clear the "decimal" flag
0002: A2 99            LDX      #0xFF            ; Set stack ...
0004: 9A               TXS                       ; ... to the end of RAM
0005: 20 99 99         JSR      INIT             ; Initialize game environment
0008: 20 99 99         JSR      INIT_SELMODE     ; Start out in SELECT-MODE
                  
                  VIDEO_KERNEL:
                  
000B: A9 99            LDA      #2               ; D1 bit ON
000D: 85 99            STA      WSYNC            ; Wait for the end of the current line
000F: 85 99            STA      VBLANK           ; Turn the electron beam off
0011: 85 99            STA      WSYNC            ; Wait for all ...
0013: 85 99            STA      WSYNC            ; ... the electrons ...
0015: 85 99            STA      WSYNC            ; ... to drain out.
0017: 85 99            STA      VSYNC            ; Trigger the vertical sync signal
0019: 85 99            STA      WSYNC            ; Hold the vsync signal for ...
001B: 85 99            STA      WSYNC            ; ... three ...
001D: 85 99            STA      WSYNC            ; ... scanlines
001F: 85 99            STA      HMOVE            ; Tell hardware to move all game objects
0021: A9 99            LDA      #0               ; D1 bit OFF
0023: 85 99            STA      VSYNC            ; Release the vertical sync signal
0025: A9 99            LDA      #43              ; Set timer to 43*64 = 2752 machine ...
0027: 85 99            STA      TIM64T           ; ... cycles 2752/(228/3) = 36 scanlines
                  
                  ;  ***** LENGTHY GAME LOGIC PROCESSING BEGINS HERE *****
                  
                  ;  Do one of 3 routines while the beam travels back to the top
                  ;  0 = Game Over processing
                  ;  1 = Playing-Game processing
                  ;  2 = Selecting-Game processing
                  
0029: E6 99            INC      ENTROPYA         ; Counting video frames as part of the random number
002B: A5 99            LDA      MODE             ; What are we doing between frames?
                  
002D: C9 99            CMP      #0               ; Mode is ...
002F: F0 99            BEQ      DoGameOverMode   ; ... "game over"
0031: C9 99            CMP      #1               ; Mode is ...
0033: F0 99            BEQ      DoPlayMode       ; ... "game play"
0035: 20 99 99         JSR      SELMODE          ; Mode is "select game"
0038: 4C 99 99         JMP      DrawFrame        ; Continue to the visible screen area
                  
                  DoPlayMode:
003B: 20 99 99         JSR      PLAYMODE         ; Playing-game processing
003E: 4C 99 99         JMP      DrawFrame        ; Continue to the visible screen area
                  
                  DoGameOverMode:
0041: 20 99 99         JSR      GOMODE           ; Game-over processing
                  
                  ;  ***** LENGTHY GAME LOGIC PROCESSING ENDS HERE *****
                  
                  DrawFrame:
0044: A5 99            LDA      INTIM            ; Wait for ...
0046: C9 99            CMP      #0               ; ... the visible area ...
0048: D0 99            BNE      DrawFrame        ; ... of the screen
                  
004A: 85 99            STA      WSYNC            ; 37th scanline
004C: A9 99            LDA      #0               ; Turn the ...
004E: 85 99            STA      VBLANK           ; ... electron beam back on
                  
0050: A9 99            LDA      #0               ; Zero out ...
0052: 85 99            STA      SCANCNT          ; ... scanline count ...
0054: 85 99            STA      TMP0             ; ... and all ...
0056: 85 99            STA      TMP1             ; ... returns ...
0058: 85 99            STA      TMP2             ; ... expected ...
005A: AA               TAX                       ; ... to come from ...
005B: A8               TAY                       ; ... BUILDROW
                  
005C: 85 99            STA      CXCLR            ; Clear collision detection
                  
                  DrawVisibleRows:
                  
005E: A5 99            LDA      TMP0             ; Get A ready (PF0 value)
0060: 85 99            STA      WSYNC            ; Wait for very start of row
0062: 86 99            STX      GRP0             ; Player 0 -- in X
0064: 84 99            STY      GRP1             ; Player 1 -- in Y
0066: 85 99            STA      PF0              ; PF0      -- in TMP0 (already in A)
0068: A5 99            LDA      TMP1             ; PF1      -- in TMP1
006A: 85 99            STA      PF1              ; ...
006C: A5 99            LDA      TMP2             ; PP2      -- in TMP2
006E: 85 99            STA      PF2              ; ...
                  
0070: 20 99 99         JSR      BUILDROW         ; This MUST take through to the next line
                  
0073: E6 99            INC      SCANCNT          ; Next scan line
0075: A5 99            LDA      SCANCNT          ; Do 109*2 = 218 lines
0077: C9 99            CMP      #109             ; All done?
0079: D0 99            BNE      DrawVisibleRows  ; No ... get all the visible rows
                  
                  ;  END VISIBLE PART OF FRAME
                  
007B: A9 99            LDA      #0               ; Turn off electron beam
007D: 85 99            STA      WSYNC            ; Next scanline
007F: 85 99            STA      PF0              ; Play field 0 off
0081: 85 99            STA      GRP0             ; Player 0 off
0083: 85 99            STA      GRP1             ; Player 1 off
0085: 85 99            STA      PF1              ; Play field 1 off
0087: 85 99            STA      PF2              ; Play field 2 off
0089: 85 99            STA      WSYNC            ; Next scanline
                  
008B: 4C 99 99         JMP      VIDEO_KERNEL
                  
                  BUILDROW:
                  
008E: A5 99            LDA      SCANCNT          ; Where are we on the screen?
                  
0090: C9 99            CMP      #6               ; If we are in the ...
0092: 90 99            BCC      ShowScore        ; ... score area
                  
0094: 29 99            AND      #7               ; Lower 3 bits as an index again
0096: A8               TAY                       ; Using Y to lookup graphics
0097: B9 99 99         LDA      GR_PLAYER,Y      ; Get the graphics (if enabled on this row)
009A: AA               TAX                       ; Hold it (for return as player 0)
009B: A8               TAY                       ; Hold it (for return as player 1)
009C: A5 99            LDA      SCANCNT          ; Scanline count again
009E: 4A               LSR      A                ; This time ...
009F: 4A               LSR      A                ; ... we divide ...
00A0: 4A               LSR      A                ; ... by eight (8 rows in picture)
                  
00A1: C5 99            CMP      PLAYR0Y          ; Scanline group of the P0 object?
00A3: F0 99            BEQ      ShowP0           ; Yes ... keep the picture
00A5: A2 99            LDX      #0               ; Not time for Player 0 ... no graphics
                  ShowP0:
                  
00A7: C5 99            CMP      PLAYR1Y          ; Scanline group of the P1 object?
00A9: F0 99            BEQ      ShowP1           ; Yes ... keep the picture
00AB: A0 99            LDY      #0               ; Not time for Player 0 ... no graphics
                  ShowP1:
                  
00AD: A5 99            LDA      WALLSTART        ; Calculate ...
00AF: 18               CLC                       ; ... the bottom ...
00B0: 65 99            ADC      WALLHEI          ; ... of ...
00B2: 85 99            STA      TMP0             ; ... the wall
                  
00B4: A5 99            LDA      SCANCNT          ; Scanline count
                  
00B6: C5 99            CMP      WALLSTART        ; Past upper part of wall?
00B8: 90 99            BCC      NoWall           ; No ... skip it
00BA: C5 99            CMP      TMP0             ; Past lower part of wall
00BC: B0 99            BCS      NoWall           ; Yes ... skip it
                  
                  ;  The wall is on this row
00BE: A5 99            LDA      WALLDRELA        ; Draw wall ...
00C0: 85 99            STA      TMP0             ; ... by transfering ...
00C2: A5 99            LDA      WALLDRELB        ; ... playfield ...
00C4: 85 99            STA      TMP1             ; ... patterns ...
00C6: A5 99            LDA      WALLDRELC        ; ... to ...
00C8: 85 99            STA      TMP2             ; ... return area
00CA: 60               RTS                       ; Done
                  
                  NoWall:
                  ;  The wall is NOT on this row
00CB: A9 99            LDA      #0               ; No walls on this row
00CD: 85 99            STA      TMP0             ; ... clear ...
00CF: 85 99            STA      TMP1             ; ... out ...
00D1: 85 99            STA      TMP2             ; ... the playfield
00D3: 60               RTS                       ; Done
                  
                  ShowScore:
00D4: 29 99            AND      #7               ; OLine=182  Only need the lower 3 bits
00D6: A8               TAY                       ; OLine=183  Soon to be an index into a list
                  
                  ;  At this point, the beam is past the loading of the
                  ;  playfield for the left half. We want to make sure
                  ;  that the right half of the playfield is off, so do that
                  ;  now.
                  
00D7: A2 99            LDX      #0               ; Blank bit pattern
00D9: 86 99            STX      TMP0             ; This will always be blank
00DB: 86 99            STX      PF1              ; Turn off playfield ...
00DD: 86 99            STX      PF2              ; ... for right half of the screen
                  
00DF: AA               TAX                       ; Another index
00E0: B9 99 99         LDA      SCORE_PF1,Y      ; Lookup the PF1 graphics for this row
00E3: 85 99            STA      TMP1             ; Return it to the caller
00E5: A8               TAY                       ; We'll need this value again in a second
00E6: B5 99            LDA      SCORE_PF2,X      ; Lookup the PF2 graphics for this row
00E8: 85 99            STA      TMP2             ; Return it to the caller
                  
00EA: 85 99            STA      WSYNC            ; Now on the next row
                  
00EC: 84 99            STY      PF1              ; Repeat the left-side playfield ...
00EE: 85 99            STA      PF2              ; ... onto the new row
                  
00F0: B5 99            LDA      SCORE_PF2,X      ; Kill some time waiting for the ...
00F2: B5 99            LDA      SCORE_PF2,X      ; ... beam to pass the left half ...
00F4: B5 99            LDA      SCORE_PF2,X      ; ... of the playfield again
00F6: B5 99            LDA      SCORE_PF2,X      ; ...
00F8: B5 99            LDA      SCORE_PF2,X      ; ...
00FA: B5 99            LDA      SCORE_PF2,X      ; ...
                  
00FC: A2 99            LDX      #0               ; Return 0 (off) for player 0 ...
00FE: A0 99            LDY      #0               ; ... and player 1
                  
                  ;  The beam is past the left half of the field again.
                  ;  Turn off the playfield.
                  
0100: 86 99            STX      PF1              ; 0 to PF1 ...
0102: 86 99            STX      PF2              ; ... and PF2
0104: 60               RTS                       ;  Done
                  
                  INIT:
                  ;  This function is called ONCE at power-up/reset to initialize various
                  ;  game settings and variables.
                  
0105: A9 99            LDA      #64              ; Wall is ...
0107: 85 99            STA      COLUPF           ; ... redish
0109: A9 99            LDA      #126             ; P0 is ...
010B: 85 99            STA      COLUP0           ; ... white
010D: A9 99            LDA      #0               ; P1 ...
010F: 85 99            STA      COLUP1           ; ... black
                  
0111: A9 99            LDA      #5               ; Right half of playfield is reflection of left ...
0113: 85 99            STA      CTRLPF           ; ... and playfield is on top of players
                  
                  ; TODO other hardware inits here
                  
0115: A2 99            LDX      #4               ; Player 0 position count
0117: A0 99            LDY      #3               ; Player 1 position count
0119: 85 99            STA      WSYNC            ; Get a fresh scanline
                  
                  TimeP0Pos:
011B: CA               DEX                       ; Kill time while the beam moves ...
011C: E0 99            CPX      #0               ; ... to desired ...
011E: D0 99            BNE      TimeP0Pos        ; ... position
0120: 85 99            STA      RESP0            ; Mark player 0's X position
                  
                  TimeP1Pos:
0122: 88               DEY                       ; Kill time while the beam moves ...
0123: C0 99            CPY      #0               ; ... to desired ...
0125: D0 99            BNE      TimeP1Pos        ; ... position
0127: 85 99            STA      RESP1            ; Mark player 1's X position
                  
0129: 20 99 99         JSR      EXPERTISE        ; Initialize the players' Y positions base on expert-settings
                  
012C: A9 99            LDA      #10              ; Wall is ...
012E: 85 99            STA      WALLHEI          ; ... 10 double-scanlines high
                  
0130: A9 99            LDA      #0               ; Set score to ...
0132: 85 99            STA      WALLCNT          ; ... 0
0134: 20 99 99         JSR      MAKE_SCORE       ; Blank the score digits
0137: A9 99            LDA      #0               ; Blank bits ...
0139: 85 99            STA      SCORE_PF2+5      ; ... on the end of each ...
013B: 85 99            STA      SCORE_PF1+5      ; ... digit pattern
                  
013D: 20 99 99         JSR      ADJUST_DIF       ; Initialize the wall parameters
0140: 20 99 99         JSR      NEW_GAPS         ; Build the wall's initial gap
                  
0143: A9 99            LDA      #112             ; Set wall position off bottom ...
0145: 85 99            STA      WALLSTART        ; ... to force a restart on first move
                  
0147: A9 99            LDA      #0               ; Zero out ...
0149: 85 99            STA      HMP0             ; ... player 0 motion ...
014B: 85 99            STA      HMP1             ; ... and player 1 motion
                  
014D: 60               RTS                       ; Done
                  
                  INIT_PLAYMODE:
                  
                  ;  This function initializes the game play mode
                  
014E: A9 99            LDA      #192             ; Background is ...
0150: 85 99            STA      COLUBK           ; ... greenish
0152: A9 99            LDA      #1               ; Game mode is ...
0154: 85 99            STA      MODE             ; ... SELECT
0156: A9 99            LDA      #255             ; Restart wall score to ...
0158: 85 99            STA      WALLCNT          ; ... 0 on first move
015A: A9 99            LDA      #112             ; Force wall to start ...
015C: 85 99            STA      WALLSTART        ; ... over on first move
015E: 20 99 99         JSR      INIT_MUSIC       ; Initialize the music
0161: 60               RTS                       ; Done
                  
                  PLAYMODE:
                  
                  ;  This function is called once per frame to process the main game play.
                  
                  
0162: 20 99 99         JSR      SEL_RESET_CHK    ; Check to see if Reset/Select has changed
                  
0165: C9 99            CMP      #0               ; Is select pressed?
0167: F0 99            BEQ      NoSelect         ; No ... skip
0169: 86 99            STX      DEBOUNCE         ; Restore the old value ...
016B: 20 99 99         JSR      INIT_SELMODE     ; ... and let select-mode process the toggle
016E: 60               RTS                       ; Done
                  
                  NoSelect:
016F: 20 99 99         JSR      PROCESS_MUSIC    ; Process any playing music
0172: 20 99 99         JSR      MOVE_WALLS       ; Move the walls
                  
0175: C9 99            CMP      #1               ; Wall on first row?
0177: D0 99            BNE      NoFirst          ; No ... move on
0179: E6 99            INC      WALLCNT          ; Bump the score
017B: 20 99 99         JSR      ADJUST_DIF       ; Change the wall parameters based on score
017E: A5 99            LDA      WALLCNT          ; Change the ...
0180: 20 99 99         JSR      MAKE_SCORE       ; ... score pattern
0183: 20 99 99         JSR      NEW_GAPS         ; Calculate the new gap position
                  
                  NoFirst:
0186: A5 99            LDA      CXP0FB          ; Player 0 collision with playfield
0188: 85 99            STA      TMP0            ; Hold it
018A: A5 99            LDA      CXP1FB          ; Player 1 collision with playfield
018C: 05 99            ORA      TMP0            ; Did either ...
018E: 29 99            AND      #128            ; ... player hit ...
0190: C9 99            CMP      #0              ; ... wall?
0192: F0 99            BEQ      NoHit           ; No ... move on
0194: 20 99 99         JSR      INIT_GOMODE     ; Go to Game-Over mode
0197: 60               RTS                      ; Done
                  
                  NoHit:
0198: A5 99            LDA      SWCHA           ; Joystick
019A: 29 99            AND      #128            ; Player 0 ...
019C: C9 99            CMP      #0              ; ... moving left?
019E: F0 99            BEQ      MoveP0Left      ; Yes ... move left
01A0: A5 99            LDA      SWCHA           ; Joystick
01A2: 29 99            AND      #64             ; Player 0 ...
01A4: C9 99            CMP      #0              ; ... moving right?
01A6: F0 99            BEQ      MoveP0Right     ; Yes ... move right
01A8: A9 99            LDA      #0              ; Not moving value
01AA: 4C 99 99         JMP      SetMoveP0       ; Don't move the player
                  MoveP0Right:
01AD: A9 99            LDA      #16             ; +1
01AF: 4C 99 99         JMP      SetMoveP0       ; Set HMP0
                  MoveP0Left:
01B2: A9 99            LDA      #240            ; -1
                  SetMoveP0:
01B4: 85 99            STA      HMP0            ; New movement value P0
                  
01B6: A5 99            LDA      SWCHA           ; Joystick
01B8: 29 99            AND      #8              ; Player 1 ...
01BA: C9 99            CMP      #0              ; ... moving left?
01BC: F0 99            BEQ      MoveP1Left      ; Yes ... move left
01BE: A5 99            LDA      SWCHA           ; Joystick
01C0: 29 99            AND      #4              ; Player 0 ...
01C2: C9 99            CMP      #0              ; ... moving right?
01C4: F0 99            BEQ      MoveP1Right     ; Yes ... move right
01C6: A9 99            LDA      #0              ; Not moving value
01C8: 4C 99 99         JMP      SetMoveP1       ; Don't move the player
                  MoveP1Right:
01CB: A9 99            LDA      #16             ; +1
01CD: 4C 99 99         JMP      SetMoveP1       ; Set HMP0
                  MoveP1Left:
01D0: A9 99            LDA      #240            ; -1
                  SetMoveP1:
01D2: 85 99            STA      HMP1            ; New movement value P1
                  
01D4: 60               RTS                      ; Done
                  
                  INIT_SELMODE:
                  
                  ;  This function initializes the games SELECT-MODE
                  
01D5: A9 99            LDA      #0              ; Turn off ...
01D7: 85 99            STA      AUDV0           ; ... all ...
01D9: 85 99            STA      AUDV1           ; ... sound
01DB: A9 99            LDA      #200            ; Background ...
01DD: 85 99            STA      COLUBK          ; ... greenish bright
01DF: A9 99            LDA      #2              ; Now in ...
01E1: 85 99            STA      MODE            ; SELECT game mode
01E3: 60               RTS                      ; Done
                  
                  
                  SELMODE:
                  
                  ;  This function is called once per frame to process the SELECT-MODE.
                  ;  The wall moves here, but doesn't change or collide with players.
                  ;  This function selects between 1 and 2 player game.
                  
01E4: 20 99 99         JSR      MOVE_WALLS       ; Move the walls
01E7: 20 99 99         JSR      SEL_RESET_CHK    ; Check the reset/select switches
01EA: C9 99            CMP      #1               ; RESET button?
01EC: F0 99            BEQ      SelStartGame     ; Yes ... start game
01EE: C9 99            CMP      #3               ; RESET and SELECT?
01F0: F0 99            BEQ      SelStartGame     ; Yes ... start game
01F2: C9 99            CMP      #2               ; Select only?
01F4: D0 99            BNE      SelExp           ; No ... stay in this mode
01F6: A5 99            LDA      PLAYR1Y          ; Select toggled. Get player 1 Y coordinate
01F8: C9 99            CMP      #255             ; 2nd player on the screen?
01FA: F0 99            BEQ      SelP1On          ; No ... toggle it on
01FC: A9 99            LDA      #255             ; Yes ...
01FE: 85 99            STA      PLAYR1Y          ; ... toggle it off
0200: 4C 99 99         JMP      SelExp           ; Move to expertise
                  SelP1On:
0203: A9 99            LDA      #12              ; Y coordinate
0205: 85 99            STA      PLAYR1Y          ; On screen now
0207: 4C 99 99         JMP      SelExp           ; Move to expertise
                  
                  SelStartGame:
020A: 20 99 99         JSR      INIT_PLAYMODE    ; Reset toggled ... start game
                  SelExp:
020D: 20 99 99         JSR      EXPERTISE        ; Adjust both players for pro settings
0210: 60               RTS                       ; Done
                  
                  INIT_GOMODE:
                  
                  ;  This function initializes the GAME-OVER game mode.
                  
0211: 85 99            STA      HMCLR            ; Stop both players from moving
0213: A5 99            LDA      CXP0FB           ; P0 collision ...
0215: 29 99            AND      #128             ; ... with wall
0217: C9 99            CMP      #0               ; Did P0 hit the wall?
0219: D0 99            BNE      GoCheckP1        ; Yes ... leave it at bottom
021B: A9 99            LDA      #2               ; No ... move player 0 ...
021D: 85 99            STA      PLAYR0Y          ; ... up the screen to show win
                  
                  GoCheckP1:
021F: A5 99            LDA      CXP1FB           ; P1 collision ...
0221: 29 99            AND      #128             ; ... with wall
0223: C9 99            CMP      #0               ; Did P1 hit the wall?
0225: D0 99            BNE      GoP1Hit          ; Yes ... leave it at the bottom
0227: A5 99            LDA      PLAYR1Y          ; Is P1 even ...
0229: C9 99            CMP      #255             ; ... on the screen (2 player game?)
022B: F0 99            BEQ      GoP1Hit          ; No ... skip it
022D: A9 99            LDA      #2               ; Player 1 is onscreen and didn't collide ...
022F: 85 99            STA      PLAYR1Y          ; ... move up the screen to show win
                  
                  GoP1Hit:
0231: A9 99            LDA      #0               ; Going to ...
0233: 85 99            STA      MODE             ; ... game-over mode
0235: 85 99            STA      AUDV0            ; Turn off any ...
0237: 85 99            STA      AUDV1            ; ... sound
0239: 20 99 99         JSR      INIT_GO_FX       ; Initialize sound effects
023C: 60               RTS                       ; Done
                  
                  GOMODE:
                  
                  ; This function is called every frame to process the game
                  ; over sequence. When the sound effect has finished, the
                  ; game switches to select mode.
                  
023D: 20 99 99         JSR      PROCESS_GO_FX    ; Process the sound effects
0240: C9 99            CMP      #0               ; Effects still running?
0242: F0 99            BEQ      GoKeepGoing      ; Yes ... let them run
0244: 20 99 99         JSR      INIT_SELMODE     ; When effect is over, go to select mode
                  GoKeepGoing:
0247: 60               RTS                       ; Done
                  
                  MOVE_WALLS:
                  
                  ;  This function moves the wall down the screen and back to position 0
                  ;  when it reaches (or passes) 112.
                  
0248: C6 99            DEC      WALLDELY         ; Wall motion timer
024A: A5 99            LDA      WALLDELY         ; Time to ...
024C: C9 99            CMP      #0               ; ... move the wall?
024E: D0 99            BNE      WallDone         ; No ... leave it alone
0250: A5 99            LDA      WALLDELYR        ; Reset the ...
0252: 85 99            STA      WALLDELY         ; ... delay count
0254: A5 99            LDA      WALLSTART        ; Current wall position
0256: 18               CLC                       ; Increment ...
0257: 65 99            ADC      WALL_INC         ; ... wall position
0259: C9 99            CMP      #112             ; At the bottom?
025B: 90 99            BCC      WallOK           ; No ... leave it alone
025D: A9 99            LDA      #0               ; Else restart ...
025F: 85 99            STA      WALLSTART        ; ... wall at top of screen
0261: A9 99            LDA      #1               ; Return flag that wall DID restart
0263: 60               RTS                       ; Done
                  WallOK:
0264: 85 99            STA      WALLSTART        ; Store new wall position
                  WallDone:
0266: A9 99            LDA      #0               ; Return flag that wall did NOT restart
0268: 60               RTS                       ; Done
                  
                  
                  NEW_GAPS:
                  
                  ;  This function builds the PF0, PF1, and PF2 graphics for a wall
                  ;  with the gap pattern (GAPBITS) placed at random in the 20 bit
                  ;  area.
                  
0269: A9 99            LDA      #255             ; Start with ...
026B: 85 99            STA      WALLDRELA        ; ... solid wall in PF0 ...
026D: 85 99            STA      WALLDRELB        ; ... and PF1
026F: A5 99            LDA      GAPBITS          ; Store the gap pattern ...
0271: 85 99            STA      WALLDRELC        ; ... in PF2
                  
0273: A5 99            LDA      ENTROPYA         ; Get ...
0275: 65 99            ADC      ENTROPYB         ; ... a randomish ...
0277: 65 99            ADC      ENTROPYC         ; ... number ...
0279: 85 99            STA      ENTROPYC         ; Update the random seed
027B: 29 99            AND      #15              ; 0 to 15
027D: C9 99            CMP      #12              ; Too far to the right?
027F: F0 99            BEQ      GapOK            ; No ... 12 is OK
0281: 90 99            BCC      GapOK            ; No ... less than 12 is OK
0283: E9 99            SBC      #9               ; Back up 9
                  
                  GapOK:
0285: C9 99            CMP      #0               ; Gap already at far left?
0287: F0 99            BEQ      GapDone          ; Yes ... done
0289: 38               SEC                       ; Roll gap ...
028A: 66 99            ROR      WALLDRELC        ; ... left ...
028C: 26 99            ROL      WALLDRELB        ; ... desired ...
028E: 66 99            ROR      WALLDRELA        ; ... times ...
0290: 38               SEC                       ; All rolls ...
0291: E9 99            SBC      #1               ; ... done?
0293: 4C 99 99         JMP      GapOK            ; No ... do them all
                  GapDone:
0296: 60               RTS                       ; New wall pattern is ready
                  
                  MAKE_SCORE:
                  
                  ;  This function builds the PF1 and PF2 graphics rows for
                  ;  the byte value passed in A. The current implementation is
                  ;  two-digits only ... PF2 is blank.
                  
0297: A2 99            LDX      #0               ; 100's digit
0299: A0 99            LDY      #0               ; 10's digit
                  
                  Count100s:
029B: C9 99            CMP      #100             ; Need another 100s digit?
029D: 90 99            BCC      Count10s         ; No ... move on to 10s
029F: E8               INX                       ; Count ...
02A0: 38               SEC                       ; ... value
02A1: E9 99            SBC      #100             ; Take off this 100
02A3: 4C 99 99         JMP      Count100s        ; Keep counting
                  Count10s:
02A6: C9 99            CMP      #10              ; Need another 10s digit?
02A8: 90 99            BCC      CountDone        ; No ... got all the tens
02AA: C8               INY                       ; Count ...
02AB: 38               SEC                       ; ... value
02AC: E9 99            SBC      #10              ; Take off this 10
02AE: 4C 99 99         JMP      Count10s         ; Keep counting
                  
                  CountDone:
02B1: 0A               ASL      A                ; One's digit ...
02B2: 0A               ASL      A                ; ... *8 ....
02B3: 0A               ASL      A                ; ... to find picture
02B4: AA               TAX                       ; One's digit picture to X
02B5: 98               TYA                       ; Now the 10's digit
02B6: 0A               ASL      A                ; Multiply ...
02B7: 0A               ASL      A                ; ... by 8 ...
02B8: 0A               ASL      A                ; ... to find picture
02B9: A8               TAY                       ; 10's picture in Y
                  
02BA: B9 99 99         LDA      DIGITS,Y         ; Get the 10's digit
02BD: 29 99            AND      #0xF0            ; Upper nibble
02BF: 85 99            STA      SCORE_PF1        ; Store left side
02C1: B5 99            LDA      DIGITS,X         ; Get the 1's digit
02C3: 29 99            AND      #0x0F            ; Lower nibble
02C5: 05 99            ORA      SCORE_PF1        ; Put left and right half together
02C7: 85 99            STA      SCORE_PF1        ; And store image
                  
                  ; We have plenty of code space. Time and registers are at a premium.
                  ; So copy/past the code for each row
                  
02C9: B9 99 99         LDA      DIGITS+1,Y       ; Repeat for 2nd line of picture ...
02CC: 29 99            AND      #0xF0            ; ...
02CE: 85 99            STA      SCORE_PF1+1      ; ...
02D0: B5 99            LDA      DIGITS+1,X       ; ...
02D2: 29 99            AND      #15              ; ...
02D4: 05 99            ORA      SCORE_PF1+1      ; ...
02D6: 85 99            STA      SCORE_PF1+1      ; ...
                  
02D8: B9 99 99         LDA      DIGITS+2,Y       ; Repeat for 3nd line of picture
02DB: 29 99            AND      #0xF0            ; ...
02DD: 85 99            STA      SCORE_PF1+2      ; ...
02DF: B5 99            LDA      DIGITS+2,X       ; ...
02E1: 29 99            AND      #0x0F            ; ...
02E3: 05 99            ORA      SCORE_PF1+2      ; ...
02E5: 85 99            STA      SCORE_PF1+2      ; ...
                  
02E7: B9 99 99         LDA      DIGITS+3,Y       ; Repeat for 4th line of picture
02EA: 29 99            AND      #0xF0            ; ...
02EC: 85 99            STA      SCORE_PF1+3      ; ...
02EE: B5 99            LDA      DIGITS+3,X       ; ...
02F0: 29 99            AND      #0x0F            ; ...
02F2: 05 99            ORA      SCORE_PF1+3      ; ...
02F4: 85 99            STA      SCORE_PF1+3      ; ...
                  
02F6: B9 99 99         LDA      DIGITS+4,Y       ; Repeat for 5th line of picture
02F9: 29 99            AND      #0xF0            ; ...
02FB: 85 99            STA      SCORE_PF1+4      ; ...
02FD: B5 99            LDA      DIGITS+4,X       ; ...
02FF: 29 99            AND      #0x0F            ; ...
0301: 05 99            ORA      SCORE_PF1+4      ; ...
0303: 85 99            STA      SCORE_PF1+4      ; ...
                  
0305: A9 99            LDA      #0               ; For now ...
0307: 85 99            STA      SCORE_PF2        ; ... there ...
0309: 85 99            STA      SCORE_PF2+1      ; ... is ...
030B: 85 99            STA      SCORE_PF2+2      ; ... no ...
030D: 85 99            STA      SCORE_PF2+3      ; ... 100s ...
030F: 85 99            STA      SCORE_PF2+4      ; ... digit drawn
                  
0311: 60               RTS                       ; Done
                  
                  EXPERTISE:
                  
                  ;  This function changes the Y position of the players based on the
                  ;  position of their respective pro/novice switches. The player 1
                  ;  position is NOT changed if the mode is a single-player game.
                  
0312: A5 99            LDA      SWCHB            ; Check P0 ...
0314: 29 99            AND      #0x40            ; ... pro/novice settings
0316: C9 99            CMP      #0               ; Amateur?
0318: F0 99            BEQ      ExpP0Ama         ; Yes ... near the bottom of screen
031A: A9 99            LDA      #8               ; Pro ... near the top
031C: 4C 99 99         JMP      ExpP1            ; Store and check P0
                  ExpP0Ama:
031F: A9 99            LDA      #12              ; near the bottom
                  
                  ExpP1:
0321: 85 99            STA      PLAYR0Y          ; Player 0 Y coordinate
                  
0323: A6 99            LDX      PLAYR1Y          ; Is P1 on ...
0325: E0 99            CPX      #255             ; ... the screen?
0327: F0 99            BEQ      ExpNoP1          ; No ... skip all this
0329: A5 99            LDA      SWCHB            ; Check P1 ...
032B: 29 99            AND      #0x80            ; ... pro/novice settings
032D: C9 99            CMP      #0               ; Amateur?
032F: F0 99            BEQ      ExpP1Ama         ; Yes ... near the bottom of the screen
0331: A2 99            LDX      #8               ; Pro ... near the top
0333: 4C 99 99         JMP      ExpDone          ; Store and out
                  ExpP1Ama:
0336: A2 99            LDX      #12              ; Novice ... near the bottom
                  ExpDone:
0338: 86 99            STX      PLAYR1Y          ; Player 1 Y coordinate
                  ExpNoP1:
033A: 60               RTS                       ; Done
                  
                  ADJUST_DIF:
                  
                  ;  This function adjusts the wall game difficulty values based on the
                  ;  current score. The music can also change with the difficulty. A single
                  ;  table describes the new values and when they take effect.
                  
033B: A2 99            LDX      #0               ; Starting at index 0
                  
                  AdjNextRow:
033D: B5 99            LDA      SKILL_VALUES,X   ; Get the score match
033F: C9 99            CMP      #255             ; At the end of the table?
0341: D0 99            BNE      AdjCheckTable    ; No ... check this row
0343: 60               RTS                       ; End of the table ... leave it alone
                  AdjCheckTable:
0344: C5 99            CMP      WALLCNT          ; Is this our row?
0346: D0 99            BNE      AdjBump          ; No ... bump to next
0348: E8               INX                       ; Copy ...
0349: B5 99            LDA      SKILL_VALUES,X   ; ... new ...
034B: 85 99            STA      WALL_INC         ; ... wall increment
034D: E8               INX                       ; Copy ...
034E: B5 99            LDA      SKILL_VALUES,X   ; ... new ...
0350: 85 99            STA      WALLDELY         ; ... wall ...
0352: 85 99            STA      WALLDELYR        ; ... delay
0354: E8               INX                       ; Copy ...
0355: B5 99            LDA      SKILL_VALUES,X   ; ... new ...
0357: 85 99            STA      GAPBITS          ; ... gap pattern
0359: E8               INX                       ; Copy ...
035A: B5 99            LDA      SKILL_VALUES,X   ; ... new ...
035C: 85 99            STA      MUSAIND          ; ... MusicA index
035E: E8               INX                       ; Copy ...
035F: B5 99            LDA      SKILL_VALUES,X   ; ... new ...
0361: 85 99            STA      MUSBIND          ; ... MusicB index
0363: A9 99            LDA      #1               ; Force ...
0365: 85 99            STA      MUSADEL          ; ... music to ...
0367: 85 99            STA      MUSBDEL          ; ... start new
0369: 60               RTS                       ; Done
                  AdjBump:
036A: E8               INX                       ; Move ...
036B: E8               INX                       ; ... X ...
036C: E8               INX                       ; ... to ...
036D: E8               INX                       ; ... next ...
036E: E8               INX                       ; ... row of ...
036F: E8               INX                       ; ... table
0370: 4C 99 99         JMP      AdjNextRow       ; Try next row
                  
                  
                  SEL_RESET_CHK:
                  
                  ;  This function checks for changes to the reset/select
                  ;  switches and debounces the transitions.
                  ;  xxxxxxSR (Select, Reset)
                  
0373: A6 99            LDX      DEBOUNCE         ; Get the last value
0375: A5 99            LDA      SWCHB            ; New value
0377: 29 99            AND      #3               ; Only need bottom 2 bits
0379: C5 99            CMP      DEBOUNCE         ; Same as before?
037B: F0 99            BEQ      SelDebounce      ; Yes ... return nothing changed
037D: 85 99            STA      DEBOUNCE         ; Hold new last value
037F: 49 99            EOR      #255             ; Active low to active high
0381: 29 99            AND      #3               ; Only need select/reset
0383: 60               RTS                       ; Return changes
                  SelDebounce:
0384: A9 99            LDA      #0               ; Return 0 ...
0386: 60               RTS                       ; ... nothing changed
                  
                  
                  INIT_MUSIC:
                  
                  ;  This function initializes the hardware and temporaries
                  ;  for 2-channel music
                  
0387: A9 99            LDA      #6               ; Audio control ...
0389: 85 99            STA      AUDC0            ; ... to pure ...
038B: 85 99            STA      AUDC1            ; ... tones
038D: A9 99            LDA      #0               ; Turn off ...
038F: 85 99            STA      AUDV0            ; ... all ...
0391: 85 99            STA      AUDV1            ; ... sound
0393: 85 99            STA      MUSAIND          ; Music pointers ...
0395: 85 99            STA      MUSBIND          ; ... to top of data
0397: A9 99            LDA      #1               ; Force ...
0399: 85 99            STA      MUSADEL          ; ... music ...
039B: 85 99            STA      MUSBDEL          ; ... reload
039D: A9 99            LDA      #15              ; Set volume levels ...
039F: 85 99            STA      MUSAVOL          ; ... to ...
03A1: 85 99            STA      MUSBVOL          ; ... maximum
03A3: 60               RTS                       ; Done
                  
                  PROCESS_MUSIC:
                  
                  ;  This function is called once per frame to process the
                  ;  2 channel music. Two tables contain the commands/notes
                  ;  for individual channels. This function changes the
                  ;  notes at the right time.
                  
03A4: C6 99            DEC      MUSADEL          ; Current note on Channel A ended?
03A6: D0 99            BNE      MusDoB           ; No ... let it play
                  
                  MusChanA:
03A8: A6 99            LDX      MUSAIND          ; Voice-A index
03AA: B5 99            LDA      MUSICA,X         ; Get the next music command
03AC: C9 99            CMP      #0               ; Jump?
03AE: F0 99            BEQ      MusCmdJumpA      ; Yes ... handle it
03B0: C9 99            CMP      #1               ; Control?
03B2: F0 99            BEQ      MusCmdCtrlA      ; Yes ... handle it
03B4: C9 99            CMP      #2               ; Volume?
03B6: D0 99            BNE      MusCmdToneA      ; No ... must be a note
03B8: E8               INX                       ; Point to volume value
03B9: E6 99            INC      MUSAIND          ; Bump the music pointer
03BB: B5 99            LDA      MUSICA,X         ; Get the volume value
03BD: E6 99            INC      MUSAIND          ; Bump the music pointer
03BF: 85 99            STA      MUSAVOL          ; Store the new volume value
03C1: 4C 99 99         JMP      MusChanA         ; Keep processing through a tone
                  
                  MusCmdCtrlA:
03C4: E8               INX                       ; Point to the control value
03C5: E6 99            INC      MUSAIND          ; Bump the music pointer
03C7: B5 99            LDA      MUSICA,X         ; Get the control value
03C9: E6 99            INC      MUSAIND          ; Bump the music pointer
03CB: 85 99            STA      AUDC0            ; Store the new control value
03CD: 4C 99 99         JMP      MusChanA         ; Keep processing through a tone
                  
                  MusCmdJumpA:
03D0: E8               INX                       ; Point to jump value
03D1: 8A               TXA                       ; X to ...
03D2: A8               TAY                       ; ... Y (pointer to jump value)
03D3: E8               INX                       ; Point one past jump value
03D4: 8A               TXA                       ; Into A so we can subtract
03D5: 38               SEC                       ; New ...
03D6: F9 99 99         SBC      MUSICA,Y         ; ... index
03D9: 85 99            STA      MUSAIND          ; Store it
03DB: 4C 99 99         JMP      MusChanA         ; Keep processing through a tone
                  
                  MusCmdToneA:
03DE: A4 99            LDY      MUSAVOL          ; Get the volume
03E0: 29 99            AND      #0x1F            ; Lower 5 bits are frequency
03E2: C9 99            CMP      #0x1F            ; Is this a silence?
03E4: D0 99            BNE      MusNoteA         ; No ... play it
03E6: A0 99            LDY      #0               ; Frequency of 31 flags silence
                  MusNoteA:
03E8: 85 99            STA      AUDF0            ; Store the frequency
03EA: 84 99            STY      AUDV0            ; Store the volume
03EC: B5 99            LDA      MUSICA,X         ; Get the note value again
03EE: E6 99            INC      MUSAIND          ; Bump to the next command
03F0: 6A               ROR      A                ; The upper ...
03F1: 6A               ROR      A                ; ... three ...
03F2: 6A               ROR      A                ; ... bits ...
03F3: 6A               ROR      A                ; ... hold ...
03F4: 6A               ROR      A                ; ... the ...
03F5: 29 99            AND      #7               ; ... delay
03F7: 18               CLC                       ; No accidental carry
03F8: 2A               ROL      A                ; Every delay tick ...
03F9: 2A               ROL      A                ; ... is *4 frames
03FA: 85 99            STA      MUSADEL          ; Store the note delay
                  
                  MusDoB:
                  
03FC: C6 99            DEC      MUSBDEL
03FE: D0 99            BNE      MusDoDone
                  
                  MusChanB:
0400: A6 99            LDX      MUSBIND
0402: B5 99            LDA      MUSICB,X
0404: C9 99            CMP      #0
0406: F0 99            BEQ      MusCmdJumpB
0408: C9 99            CMP      #1
040A: F0 99            BEQ      MusCmdCtrlB
040C: C9 99            CMP      #2
040E: D0 99            BNE      MusCmdToneB
0410: E8               INX
0411: E6 99            INC      MUSBIND
0413: B5 99            LDA      MUSICB,X
0415: E6 99            INC      MUSBIND
0417: 85 99            STA      MUSBVOL
0419: 4C 99 99         JMP      MusChanB
                  
                  MusCmdCtrlB:
041C: E8               INX
041D: E6 99            INC      MUSBIND
041F: B5 99            LDA      MUSICB,X
0421: E6 99            INC      MUSBIND
0423: 85 99            STA      AUDC1
0425: 4C 99 99         JMP      MusChanB
                  
                  MusCmdJumpB:
0428: E8               INX
0429: 8A               TXA
042A: A8               TAY
042B: E8               INX
042C: 8A               TXA
042D: 38               SEC
042E: F9 99 99         SBC      MUSICB,Y
0431: 85 99            STA      MUSBIND
0433: 4C 99 99         JMP      MusChanB
                  
                  MusCmdToneB:
0436: A4 99            LDY      MUSBVOL
0438: 29 99            AND      #0x1F
043A: C9 99            CMP      #0x1F
043C: D0 99            BNE      MusNoteB
043E: A0 99            LDY      #0
                  MusNoteB:
0440: 85 99            STA      AUDF1
0442: 84 99            STY      AUDV1
0444: B5 99            LDA      MUSICB,X
0446: E6 99            INC      MUSBIND
0448: 6A               ROR      A
0449: 6A               ROR      A
044A: 6A               ROR      A
044B: 6A               ROR      A
044C: 6A               ROR      A
044D: 29 99            AND      #7
044F: 18               CLC
0450: 2A               ROL      A
0451: 2A               ROL      A
0452: 85 99            STA      MUSBDEL
                  
                  MusDoDone:
0454: 60               RTS                       ; Done
                  
                  
                  INIT_GO_FX:
                  
                  ;  This function initializes the hardware and temporaries
                  ;  to play the soundeffect of a player hitting the wall
                  
0455: A9 99            LDA      #5               ; Set counter for frame delay ...
0457: 85 99            STA      MUS_TMP1         ; ... between frequency change
0459: A9 99            LDA      #3               ; Tone type ...
045B: 85 99            STA      AUDC0            ; ... poly tone
045D: A9 99            LDA      #15              ; Volume A ...
045F: 85 99            STA      AUDV0            ; ... to max
0461: A9 99            LDA      #0               ; Volume B ...
0463: 85 99            STA      AUDV1            ; ... silence
0465: A9 99            LDA      #240             ; Initial ...
0467: 85 99            STA      MUS_TMP0         ; ... sound ...
0469: 85 99            STA      AUDF0            ; ... frequency
046B: 60               RTS                       ; Done
                  
                  PROCESS_GO_FX:
                  
                  ;  This function is called once per scanline to play the
                  ;  soundeffects of a player hitting the wall.
                  
046C: C6 99            DEC      MUS_TMP1         ; Time to change the frequency?
046E: D0 99            BNE      FxRun            ; No ... let it run
0470: A9 99            LDA      #5               ; Reload ...
0472: 85 99            STA      MUS_TMP1         ; ... the frame count
0474: E6 99            INC      MUS_TMP0         ; Increment ...
0476: A5 99            LDA      MUS_TMP0         ; ... the frequency divisor
0478: 85 99            STA      AUDF0            ; Change the frequency
047A: C9 99            CMP      #0
047C: D0 99            BNE      FxRun
047E: A9 99            LDA      #1               ; All done ... return 1
0480: 60               RTS                       ; Done
                  FxRun:
0481: A9 99            LDA      #0               ; Keep playing
0483: 60               RTS                       ; Done
                  
                  ;  Music commands for Channel A and Channel B
                  
                  ;  A word on music and wall timing ...
                  
                  ;  Wall moves between scanlines 0 and 111 (112 total)
                  
                  ;  Wall-increment   frames-to-top
                  ;       3             336
                  ;       2             224
                  ;       1             112
                  ;      0.5             56  ; Ah ... but we are getting one less
                  
                  ;  Each tick is multiplied by 4 to yield 4 frames per tick
                  ;  32 ticks/song = 32*4 = 128 frames / song
                  
                  ;  We want songs to start with wall at top ...
                  
                  ;  Find the least-common-multiple
                  ;  336 and 128 : 2688 8 walls, 21 musics
                  ;  224 and 128 :  896 4 walls,  7 musics
                  ;  112 and 128 :  896 8 walls,  7 musics
                  ;   56 and 128 :  896 16 walls, 7 musics
                  
                  ;  Wall moving every other gives us 112*2=224 scanlines
                  ;  Song and wall are at start every 4
                  ;  1 scanline, every 8
                  ;  Wall delay=3 gives us 128*3=336 scanlines 2
                  
                  .MUSCMD_JUMP      =     0      ; Music command value for JUMP
                  .MUSCMD_CONTROL   =     1      ; Music command value for CONTROL
                  .MUSCMD_VOLUME    =     2      ; Music command value for VOLUME
                  .MUS_REST         =     31     ; Frequency value for silence
                  .MUS_DEL_1        =     32*1   ; Note duration 1
                  .MUS_DEL_2        =     32*2   ; Note duration 2
                  .MUS_DEL_3        =     32*3   ; Note duration 3
                  .MUS_DEL_4        =     32*4   ; Note duration 4
                  
                  MUSICA:
                  
                  MA_SONG_1:
                  
0484: 01 0C            .byte  MUSCMD_CONTROL, 12
0486: 02 0F            .byte  MUSCMD_VOLUME,  15 ; Volume (full)
                  
                  MA1_01:
0488: 6F               .byte  MUS_DEL_3  +  15
0489: 3F               .byte  MUS_DEL_1  +  MUS_REST
048A: 6F               .byte  MUS_DEL_3  +  15
048B: 3F               .byte  MUS_DEL_1  +  MUS_REST
048C: 27               .byte  MUS_DEL_1  +  7
048D: 3F               .byte  MUS_DEL_1  +  MUS_REST
048E: 27               .byte  MUS_DEL_1  +  7
048F: 3F               .byte  MUS_DEL_1  +  MUS_REST
0490: 5F               .byte  MUS_DEL_2  +  MUS_REST
0491: 28               .byte  MUS_DEL_1  +  8
0492: 3F               .byte  MUS_DEL_1  +  MUS_REST
0493: 9F               .byte  MUS_DEL_4  +  MUS_REST
0494: 51               .byte  MUS_DEL_2  +  17
0495: 5F               .byte  MUS_DEL_2  +  MUS_REST
0496: 51               .byte  MUS_DEL_2  +  17
0497: 5F               .byte  MUS_DEL_2  +  MUS_REST
0498: 70               .byte  MUS_DEL_3  +  16
0499: 3F               .byte  MUS_DEL_1  +  MUS_REST
049A: 00 14            .byte  MUSCMD_JUMP, (MA1_END - MA1_01) ; Repeat back to top
                  MA1_END:
                  
                  MA_SONG_2:
049C: 01 0C            .byte  MUSCMD_CONTROL, 12
049E: 02 0F            .byte  MUSCMD_VOLUME,  15
                  
                  MA2_01:
04A0: 2F               .byte  MUS_DEL_1  +  15
04A1: 3F               .byte  MUS_DEL_1  +  MUS_REST
04A2: 2F               .byte  MUS_DEL_1  +  15
04A3: 3F               .byte  MUS_DEL_1  +  MUS_REST
04A4: 5F               .byte  MUS_DEL_2  +  MUS_REST
04A5: 87               .byte  MUS_DEL_4  +  7
04A6: 9F               .byte  MUS_DEL_4  +  MUS_REST
04A7: 4F               .byte  MUS_DEL_2  +  15
04A8: 9F               .byte  MUS_DEL_4  +  MUS_REST
04A9: 4C               .byte  MUS_DEL_2  +  12
04AA: 5F               .byte  MUS_DEL_2  +  MUS_REST
04AB: 4F               .byte  MUS_DEL_2  +  15
04AC: 5F               .byte  MUS_DEL_2  +  MUS_REST
04AD: 51               .byte  MUS_DEL_2  +  17
04AE: 5F               .byte  MUS_DEL_2  +  MUS_REST
04AF: 00 11            .byte  MUSCMD_JUMP, (MA2_END - MA2_01) ; Repeat back to top
                  MA2_END:
                  
                  MUSICB:
                  
                  MB_SONG_1:
                  
04B1: 01 08            .byte  MUSCMD_CONTROL, 8
04B3: 02 08            .byte  MUSCMD_VOLUME,  8 ; Volume (half)
                  
                  MB1_01:
04B5: 2A               .byte  MUS_DEL_1  +  10
04B6: 3F               .byte  MUS_DEL_1  +  MUS_REST
04B7: 34               .byte  MUS_DEL_1  +  20
04B8: 3F               .byte  MUS_DEL_1  +  MUS_REST
04B9: 3E               .byte  MUS_DEL_1  +  30
04BA: 3F               .byte  MUS_DEL_1  +  MUS_REST
04BB: 2F               .byte  MUS_DEL_1  +  15
04BC: 3F               .byte  MUS_DEL_1  +  MUS_REST
04BD: 2A               .byte  MUS_DEL_1  +  10
04BE: 3F               .byte  MUS_DEL_1  +  MUS_REST
04BF: 34               .byte  MUS_DEL_1  +  20
04C0: 3F               .byte  MUS_DEL_1  +  MUS_REST
04C1: 3E               .byte  MUS_DEL_1  +  30
04C2: 3F               .byte  MUS_DEL_1  +  MUS_REST
04C3: 2F               .byte  MUS_DEL_1  +  15
04C4: 3F               .byte  MUS_DEL_1  +  MUS_REST
04C5: 00 12            .byte  MUSCMD_JUMP, (MB1_END - MB1_01) ; Repeat back to top
                  MB1_END:
                  
                  MB_SONG_2:
                  
04C7: 01 08            .byte  MUSCMD_CONTROL, 8
04C9: 02 08            .byte  MUSCMD_VOLUME,  8
                  
                  MB2_01:
04CB: 21               .byte  MUS_DEL_1  +  1
04CC: 3F               .byte  MUS_DEL_1  +  MUS_REST
04CD: 21               .byte  MUS_DEL_1  +  1
04CE: 3F               .byte  MUS_DEL_1  +  MUS_REST
04CF: 21               .byte  MUS_DEL_1  +  1
04D0: 3F               .byte  MUS_DEL_1  +  MUS_REST
04D1: 21               .byte  MUS_DEL_1  +  1
04D2: 3F               .byte  MUS_DEL_1  +  MUS_REST
04D3: 3E               .byte  MUS_DEL_1  +  30
04D4: 3F               .byte  MUS_DEL_1  +  MUS_REST
04D5: 3E               .byte  MUS_DEL_1  +  30
04D6: 3F               .byte  MUS_DEL_1  +  MUS_REST
04D7: 3E               .byte  MUS_DEL_1  +  30
04D8: 3F               .byte  MUS_DEL_1  +  MUS_REST
04D9: 3E               .byte  MUS_DEL_1  +  30
04DA: 3F               .byte  MUS_DEL_1  +  MUS_REST
04DB: 00 12            .byte  MUSCMD_JUMP, (MB2_END - MB2_01) ; Repeat back to top
                  MB2_END:
                  
                  SKILL_VALUES:
                  
                  ;  This table describes how to change the various
                  ;  difficulty parameters as the game progresses.
                  ;  For instance, the second entry in the table
                  ;  says that when the score is 4, change the values of
                  ;  wall-increment to 1, frame-delay to 2, gap-pattern to 0,
                  ;  MusicA to 24, and MusicB to 22.
                  
                  ;  A 255 on the end of the table indicates the end
                  
                  ;       Wall  Inc  Delay   Gap       MA                 MB
04DD: 00 01 03 00 00 00 .byte  0,     1,   3,     0  ,MA_SONG_1-MUSICA , MB_SONG_1-MUSICB
04E3: 04 01 02 00 18 16 .byte  4,     1,   2,     0  ,MA_SONG_2-MUSICA , MB_SONG_2-MUSICB
04E9: 08 01 01 00 00 00 .byte  8,     1,   1,     0  ,MA_SONG_1-MUSICA , MB_SONG_1-MUSICB
04EF: 10 01 01 01 18 16 .byte  16,    1,   1,     1  ,MA_SONG_2-MUSICA , MB_SONG_2-MUSICB
04F5: 18 01 01 03 00 00 .byte  24,    1,   1,     3  ,MA_SONG_1-MUSICA , MB_SONG_1-MUSICB
04FB: 20 01 01 07 18 16 .byte  32,    1,   1,     7  ,MA_SONG_2-MUSICA , MB_SONG_2-MUSICB
0501: 28 01 01 0F 00 00 .byte  40,    1,   1,    15  ,MA_SONG_1-MUSICA , MB_SONG_1-MUSICB
0507: 30 02 01 00 18 16 .byte  48,    2,   1,     0  ,MA_SONG_2-MUSICA , MB_SONG_2-MUSICB
050D: 40 02 01 01 00 00 .byte  64,    2,   1,     1  ,MA_SONG_1-MUSICA , MB_SONG_1-MUSICB
0513: 50 02 01 03 18 16 .byte  80,    2,   1,     3  ,MA_SONG_2-MUSICA , MB_SONG_2-MUSICB
0519: 60 02 01 07 00 00 .byte  96 ,   2,   1,     7  ,MA_SONG_1-MUSICA , MB_SONG_1-MUSICB
051F: FF               .byte  255
                  
                  GR_PLAYER:
                  ;  Image for players (8x8)
                  ;
0520: 10               .byte  0b__...1....
0521: 10               .byte  0b__...1....
0522: 28               .byte  0b__..1.1...
0523: 28               .byte  0b__..1.1...
0524: 54               .byte  0b__.1.1.1..
0525: 54               .byte  0b__.1.1.1..
0526: AA               .byte  0b__1.1.1.1.
0527: 7C               .byte  0b__.11111..
                  
                  DIGITS:
                  ;  Images for numbers
                  ;  We only need 5 rows, but the extra space on the end makes each digit 8 rows,
                  ;  which makes it the multiplication easier.
                  
0528: 0E               .byte 0b__....111.  ; 0 (leading 0 is blank)
0529: 0A               .byte 0b__....1.1.
052A: 0A               .byte 0b__....1.1.
052B: 0A               .byte 0b__....1.1.
052C: 0E               .byte 0b__....111.
052D: 00               .byte 0b__........
052E: 00               .byte 0b__........
052F: 00               .byte 0b__........
                  
0530: 22               .byte 0b__..1...1.  ; 1
0531: 22               .byte 0b__..1...1.
0532: 22               .byte 0b__..1...1.
0533: 22               .byte 0b__..1...1.
0534: 22               .byte 0b__..1...1.
0535: 00               .byte 0b__........
0536: 00               .byte 0b__........
0537: 00               .byte 0b__........
                  
0538: EE               .byte 0b__111.111.  ; 2
0539: 22               .byte 0b__..1...1.
053A: EE               .byte 0b__111.111.
053B: 88               .byte 0b__1...1...
053C: EE               .byte 0b__111.111.
053D: 00               .byte 0b__........
053E: 00               .byte 0b__........
053F: 00               .byte 0b__........
                  
0540: EE               .byte 0b__111.111.  ; 3
0541: 22               .byte 0b__..1...1.
0542: 66               .byte 0b__.11..11.
0543: 22               .byte 0b__..1...1.
0544: EE               .byte 0b__111.111.
0545: 00               .byte 0b__........
0546: 00               .byte 0b__........
0547: 00               .byte 0b__........
                  
0548: AA               .byte 0b__1.1.1.1.  ; 4
0549: AA               .byte 0b__1.1.1.1.
054A: EE               .byte 0b__111.111.
054B: 22               .byte 0b__..1...1.
054C: 22               .byte 0b__..1...1.
054D: 00               .byte 0b__........
054E: 00               .byte 0b__........
054F: 00               .byte 0b__........
                  
0550: EE               .byte 0b__111.111. ; 5
0551: 88               .byte 0b__1...1...
0552: EE               .byte 0b__111.111.
0553: 22               .byte 0b__..1...1.
0554: EE               .byte 0b__111.111.
0555: 00               .byte 0b__........
0556: 00               .byte 0b__........
0557: 00               .byte 0b__........
                  
0558: EE               .byte 0b__111.111. ; 6
0559: 88               .byte 0b__1...1...
055A: EE               .byte 0b__111.111.
055B: AA               .byte 0b__1.1.1.1.
055C: EE               .byte 0b__111.111.
055D: 00               .byte 0b__........
055E: 00               .byte 0b__........
055F: 00               .byte 0b__........
                  
0560: EE               .byte 0b__111.111. ; 7
0561: 22               .byte 0b__..1...1.
0562: 22               .byte 0b__..1...1.
0563: 22               .byte 0b__..1...1.
0564: 22               .byte 0b__..1...1.
0565: 00               .byte 0b__........
0566: 00               .byte 0b__........
0567: 00               .byte 0b__........
                  
0568: EE               .byte 0b__111.111. ; 8
0569: AA               .byte 0b__1.1.1.1.
056A: EE               .byte 0b__111.111.
056B: AA               .byte 0b__1.1.1.1.
056C: EE               .byte 0b__111.111.
056D: 00               .byte 0b__........
056E: 00               .byte 0b__........
056F: 00               .byte 0b__........
                  
0570: EE               .byte 0b__111.111. ; 9
0571: AA               .byte 0b__1.1.1.1.
0572: EE               .byte 0b__111.111.
0573: 22               .byte 0b__..1...1.
0574: EE               .byte 0b__111.111.
0575: 00               .byte 0b__........
0576: 00               .byte 0b__........
0577: 00               .byte 0b__........
                  
                  F7FA:
                  ; 6502 vectors
0578: 00 00            .word main
057A: 00 00            .word main  ; Reset vector (top of program)
057C: 00 00            .word main
                  
